
public class SudokoSlover {
    private static void printGrid(int[][]ar)
    {
        for(int i=0;i<ar.length;i++)
        {
            for(int j=0;j<ar[i].length;j++)
            {
                System.out.print(ar[i][j]+" ");
            }
            System.out.println();
        }
    }
    private static boolean isSafe(int[][]grid,int row,int col,int num,int n)
    {
        for(int i=0;i<n;i++)
        {
            if(grid[i][col] == num) return false;
        }
        for(int i=0;i<n;i++)
        {
            if(grid[row][i] == num) return false;
        }
        int sqrt = (int)Math.sqrt(n);
        int boxRow = row-row%sqrt;
        int boxCol = col-col%sqrt;
        for(int i=boxRow;i<boxRow+sqrt;i++)
        {
            for(int j=boxCol;j<boxCol+sqrt;j++)
            {
                if(grid[i][j] == num) return false;
            }
        }
        return true;
    }
    private static boolean sudokoSlover(int[][]grid,int n)
    {
        int row = -1, col = -1;
        boolean isEmpty = true;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j] == 0)
                {
                    row = i;
                    col = j;
                    isEmpty = false;
                    break;
                }
            }
            if(!isEmpty) break;
        }
        if(isEmpty) return true;
        for(int num=1;num<=n;num++)
        {
            if(isSafe(grid, row, col, num, n))
            {
                grid[row][col] = num;
                if(sudokoSlover(grid, n)) return true;
                else grid[row][col] = 0;
            }
        }
        return false;
    }
    public static void main(String[] args) {
        int n = 9;
        int[][] sudokuPuzzle = {
            {0, 0, 0, 2, 6, 0, 7, 0, 1},
            {6, 8, 0, 0, 7, 0, 0, 9, 0},
            {1, 9, 0, 0, 0, 4, 5, 0, 0},
            {8, 2, 0, 1, 0, 0, 0, 4, 0},
            {0, 0, 4, 6, 0, 2, 9, 0, 0},
            {0, 5, 0, 0, 0, 3, 0, 2, 8},
            {0, 0, 9, 3, 0, 0, 0, 7, 4},
            {0, 4, 0, 0, 5, 0, 0, 3, 6},
            {7, 0, 3, 0, 1, 8, 0, 0, 0}
        };
        
        sudokoSlover(sudokuPuzzle,n);
        printGrid(sudokuPuzzle);
    }
}
