class Node{
    int data;
    Node previous;
    public Node(int data)
    {
        this.data = data;
    }
}
class Stack{
    private Node top ;
    public void push(int data)
    {
        if(top == null)
        {
            top = new Node(data);
            return;
        }
        Node newNode = new Node(data); 
        newNode.previous = top;
        top = newNode;
    }
    @Override
    public String toString()
    {
        StringBuilder stack  = new StringBuilder();
        stack.append('[');
        Node temp = top;
        while(temp != null)
        {
            stack.append(temp.data);
            temp = temp.previous;
            if(temp != null) stack.append(", ");
        }
        stack.append(']');
        return stack.toString();
    }
    public int peek()
    {
        if(top == null) throw new NullPointerException();
        return top.data;
    }
    public int pop()
    {
        if(top == null) throw new NullPointerException();
        int data = top.data;
        top = top.previous;
        return data;
    }
    public int search(int data)
    {
        if(top == null) throw new NullPointerException();
        int idx = 1;
        Node temp = top;
        while(temp != null)
        {
            if(data == temp.data) break;
            temp = temp.previous;
            idx++;
        }
        return idx;
    }
    public boolean isEmpty()
    {
        return top == null;
    }
}
 class Main{
    public static void main(String[]gopii)
    {
        Stack stack = new Stack();
        stack.push(0);
        stack.push(1);
        stack.push(2);
        stack.push(3);
        stack.push(4);
        stack.push(5);
        System.out.println(stack);
        System.out.println(stack.search(4));
        System.out.println(stack.peek());
        System.out.println(stack);
    }
}
